# -*- coding: utf-8 -*-
"""Computer Vision Architecture

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1fhCmt2NF5iAG04nep7gHjqnx47SIRX0r
"""

import matplotlib.pyplot as plt
import seaborn as sns
import os
import cv2
import numpy as np
import tensorflow as tf
from sklearn.model_selection import StratifiedShuffleSplit, train_test_split

images_dir = '/content/drive/MyDrive/NOA/images/'

images = []
labels = []

for image_path in os.listdir('/content/drive/MyDrive/NOA/images/0'):
    images.append(cv2.resize(plt.imread('/content/drive/MyDrive/NOA/images/0/' + image_path), (120, 120)))
    labels.append([1, 0, 0, 0])

for image_path in os.listdir('/content/drive/MyDrive/NOA/images/1'):
    images.append(cv2.resize(plt.imread('/content/drive/MyDrive/NOA/images/1/' + image_path), (120, 120)))
    labels.append([0, 1, 0, 0])

for image_path in os.listdir('/content/drive/MyDrive/NOA/images/2'):
    images.append(cv2.resize(plt.imread('/content/drive/MyDrive/NOA/images/2/' + image_path), (120, 120)))
    labels.append([0, 0, 1, 0])

for image_path in os.listdir('/content/drive/MyDrive/NOA/images/3'):
    images.append(cv2.resize(plt.imread('/content/drive/MyDrive/NOA/images/3/' + image_path), (120, 120)))
    labels.append([0, 0, 0, 1])

for image_path in os.listdir('/content/drive/MyDrive/NOA/images/4'):
    images.append(cv2.resize(plt.imread('/content/drive/MyDrive/NOA/images/4/' + image_path), (120, 120)))
    labels.append([0, 0, 0, 1])

for image_path in os.listdir('/content/drive/MyDrive/NOA/images/5'):
    images.append(cv2.resize(plt.imread('/content/drive/MyDrive/NOA/images/5/' + image_path), (120, 120)))
    labels.append([0, 0, 0, 1])

for image_path in os.listdir('/content/drive/MyDrive/NOA/images/6'):
    images.append(cv2.resize(plt.imread('/content/drive/MyDrive/NOA/images/6/' + image_path), (120, 120)))
    labels.append([0, 0, 0, 1])

images = np.array(images, dtype='float16')/255.0
labels = np.array(labels, dtype=np.uint8)

images.shape, labels.shape

auc_callback = tf.keras.callbacks.ModelCheckpoint("/content/drive/MyDrive/weights_for_NOA's_Soul/efficientnet_v2/",
                                              monitor="val_auc",
                                              verbose=0,
                                              save_best_only=True,
                                              save_weights_only=True,
                                              mode="max",
                                              save_freq="epoch")

images_preprocessed = tf.keras.applications.efficientnet_v2.preprocess_input(images)

efficientnet_backbone = tf.keras.applications.efficientnet_v2.EfficientNetV2B2(include_top=False,
                                                                               pooling='maxpooling')

classifier = tf.keras.Sequential([efficientnet_backbone,
                                  tf.keras.layers.GlobalAveragePooling2D(),
                                  tf.keras.layers.Dense(4, activation='softmax')])

classifier.compile(loss='categorical_crossentropy', metrics=[tf.keras.metrics.AUC()], optimizer='adam')

X, X_val, y, y_val = train_test_split(images_preprocessed, labels, test_size=0.2, random_state=42)
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
X_train.shape, X_val.shape, X_test.shape, y_train.shape, y_val.shape, y_test.shape

classifier.fit(X_train, y_train, validation_data=(X_val, y_val), batch_size=6, epochs=20, callbacks=[auc_callback])

classifier.load_weights("/content/drive/MyDrive/weights_for_NOA's_Soul/efficientnet_v2/")

res = classifier.predict(X_test, batch_size=1)

matrix = [[0, 0, 0, 0],
          [0, 0, 0, 0],
          [0, 0, 0, 0],
          [0, 0, 0, 0]]

for y_pred, y_true in zip(res, y_test):
    y_pred = np.argmax(y_pred)
    y_true = np.argmax(y_true)
    matrix[y_pred][y_true] += 1

sns.heatmap(matrix, annot=True)

classifier.evaluate(X_test, y_test, batch_size=1)

plt.figure(figsize=(20,20))
for i in range(100):
    plt.subplot(10, 10, i+1)
    plt.title('y_pred:' + str(np.argmax(res[i])) + ' y_true:' + str(np.argmax(y_test[i])))
    plt.imshow(X_test[i].astype('float32'))
    plt.axis('off')

